# HG changeset patch
# User Jari Komppa <jari.komppa@gmail.com>
# Date 1550948074 -7200
#      Sat Feb 23 20:54:34 2019 +0200
# Node ID 9bccb24ba9c9ac762b1afe149fddde5ca367c961
# Parent  44a00c6361b0e201847ca3427b5cbd7ab0440ad2
Add magic streams
Added magic streams for accelerating deterministic
file operations, such as application initial load
or level loading, at the (potential) cost of using
more disk space.

diff -r 44a00c6361b0 -r 9bccb24ba9c9 docs/CREDITS.txt
--- a/docs/CREDITS.txt	Sun Feb 10 16:00:39 2019 -0500
+++ b/docs/CREDITS.txt	Sat Feb 23 20:54:34 2019 +0200
@@ -167,6 +167,9 @@
 Bug fixes:
     Rob Loach
 
+Magic streams:
+    Jari Komppa
+
 Other stuff:
     Your name here! Patches go to icculus@icculus.org ...
 
diff -r 44a00c6361b0 -r 9bccb24ba9c9 src/physfs.c
--- a/src/physfs.c	Sun Feb 10 16:00:39 2019 -0500
+++ b/src/physfs.c	Sat Feb 23 20:54:34 2019 +0200
@@ -89,6 +89,7 @@
 static PHYSFS_ArchiveInfo **archiveInfo = NULL;
 static volatile size_t numArchivers = 0;
 static size_t longest_root = 0;
+static FileHandle *magicStream = NULL;
 
 /* mutexes ... */
 static void *errorLock = NULL;     /* protects error message list.        */
@@ -2698,6 +2699,27 @@
 
     BAIL_IF(!_fname, PHYSFS_ERR_INVALID_ARGUMENT, 0);
 
+    if (magicStream && magicStream->forReading)
+    {
+        /* magic stream replay: file opens are NOPs, so
+           we'll create a dummy file handle. */
+        fh = (FileHandle *)allocator.Malloc(sizeof(FileHandle));
+        if (fh == NULL)
+        {
+            PHYSFS_setErrorCode(PHYSFS_ERR_OUT_OF_MEMORY);
+            return NULL;
+        } /* if */
+
+        memset(fh, '\0', sizeof(FileHandle));
+        fh->io = 0;
+        fh->forReading = 1;
+        fh->dirHandle = 0;
+        fh->next = openReadList;
+        openReadList = fh;
+
+        return ((PHYSFS_File *)fh);
+    } /* if */
+
     __PHYSFS_platformGrabMutex(stateLock);
 
     BAIL_IF_MUTEX(!searchPath, PHYSFS_ERR_NOT_FOUND, stateLock, 0);
@@ -2759,16 +2781,19 @@
             PHYSFS_Io *io = handle->io;
             PHYSFS_uint8 *tmp = handle->buffer;
 
-            /* send our buffer to io... */
-            if (!PHYSFS_flush((PHYSFS_File *) handle))
-                return -1;
-
-            /* ...then have io send it to the disk... */
-            else if (io->flush && !io->flush(io))
-                return -1;
-
-            /* ...then close the underlying file. */
-            io->destroy(io);
+            if (io) /* magic streams create file handles with no io */
+            {
+                /* send our buffer to io... */
+                if (!PHYSFS_flush((PHYSFS_File *)handle))
+                    return -1;
+
+                /* ...then have io send it to the disk... */
+                else if (io->flush && !io->flush(io))
+                    return -1;
+
+                /* ...then close the underlying file. */
+                io->destroy(io);
+            }
 
             if (tmp != NULL)  /* free any associated buffer. */
                 allocator.Free(tmp);
@@ -2862,9 +2887,16 @@
 PHYSFS_sint64 PHYSFS_readBytes(PHYSFS_File *handle, void *buffer,
                                PHYSFS_uint64 _len)
 {
+    PHYSFS_sint64 retval;
     const size_t len = (size_t) _len;
     FileHandle *fh = (FileHandle *) handle;
 
+    if (fh->io == NULL)
+    {
+        BAIL_IF(magicStream == NULL, PHYSFS_ERR_IO, -1);
+        fh = magicStream;
+    }
+
 #ifdef PHYSFS_NO_64BIT_SUPPORT
     const PHYSFS_uint64 maxlen = __PHYSFS_UI64(0x7FFFFFFF);
 #else
@@ -2877,10 +2909,17 @@
     BAIL_IF(_len > maxlen, PHYSFS_ERR_INVALID_ARGUMENT, -1);
     BAIL_IF(!fh->forReading, PHYSFS_ERR_OPEN_FOR_WRITING, -1);
     BAIL_IF_ERRPASS(len == 0, 0);
+
     if (fh->buffer)
         return doBufferedRead(fh, buffer, len);
 
-    return fh->io->read(fh->io, buffer, len);
+    retval = fh->io->read(fh->io, buffer, len);
+
+    /* complete failure at read will mess up the magic stream.. */
+    if (magicStream && !magicStream->forReading && retval != -1)
+        PHYSFS_writeBytes((PHYSFS_File *)magicStream, buffer, retval);
+
+    return retval;
 } /* PHYSFS_readBytes */
 
 
@@ -2940,33 +2979,70 @@
 int PHYSFS_eof(PHYSFS_File *handle)
 {
     FileHandle *fh = (FileHandle *) handle;
+    int retval = 0;
+
+    if (fh->io == NULL)
+    {
+        if (magicStream && magicStream->forReading)
+        {
+            int retval;
+            PHYSFS_readBytes((PHYSFS_File *)magicStream, &retval, sizeof(int));
+            return retval;
+        } /* if */
+        return 0; /* magic stream opened file but no magic stream open */
+    } /* if */
 
     if (!fh->forReading)  /* never EOF on files opened for write/append. */
-        return 0;
-
-    /* can't be eof if buffer isn't empty */
-    if (fh->bufpos == fh->buffill)
+    {
+        retval = 0;
+    } /* if */
+    else
     {
-        /* check the Io. */
-        PHYSFS_Io *io = fh->io;
-        const PHYSFS_sint64 pos = io->tell(io);
-        const PHYSFS_sint64 len = io->length(io);
-        if ((pos < 0) || (len < 0))
-            return 0;  /* beats me. */
-        return (pos >= len);
-    } /* if */
-
-    return 0;
+        /* can't be eof if buffer isn't empty */
+        if (fh->bufpos == fh->buffill)
+        {
+            /* check the Io. */
+            PHYSFS_Io *io = fh->io;
+            const PHYSFS_sint64 pos = io->tell(io);
+            const PHYSFS_sint64 len = io->length(io);
+            if ((pos < 0) || (len < 0))
+                retval = 0;  /* beats me. */
+            retval = (pos >= len);
+        } /* if */
+    } /* else */
+
+    if (magicStream && !magicStream->forReading)
+        PHYSFS_writeBytes((PHYSFS_File *)magicStream, &retval, sizeof(int));
+
+    return retval;
 } /* PHYSFS_eof */
 
 
 PHYSFS_sint64 PHYSFS_tell(PHYSFS_File *handle)
 {
     FileHandle *fh = (FileHandle *) handle;
-    const PHYSFS_sint64 pos = fh->io->tell(fh->io);
-    const PHYSFS_sint64 retval = fh->forReading ?
-                                 (pos - fh->buffill) + fh->bufpos :
-                                 (pos + fh->buffill);
+    PHYSFS_sint64 pos;
+    PHYSFS_sint64 retval;
+
+    if (fh->io == NULL)
+    {
+        if (magicStream && magicStream->forReading)
+        {
+            PHYSFS_sint64 retval;
+            PHYSFS_readBytes((PHYSFS_File *)magicStream, &retval, sizeof(PHYSFS_sint64));
+            return retval;
+        } /* if */
+        return 0; /* magic stream opened file but no magic stream open */
+    } /* if */
+
+    pos = fh->io->tell(fh->io);
+    retval = fh->forReading ?
+             (pos - fh->buffill) + fh->bufpos :
+             (pos + fh->buffill);
+
+    if (magicStream && !magicStream->forReading)
+        PHYSFS_writeBytes((PHYSFS_File *)magicStream, &retval, sizeof(PHYSFS_sint64));
+
     return retval;
 } /* PHYSFS_tell */
 
@@ -2974,6 +3050,9 @@
 int PHYSFS_seek(PHYSFS_File *handle, PHYSFS_uint64 pos)
 {
     FileHandle *fh = (FileHandle *) handle;
+    if (fh->io == NULL) /* magic stream file; seeks are NOPs */
+        return 1;
+
     BAIL_IF_ERRPASS(!PHYSFS_flush(handle), 0);
 
     if (fh->buffer && fh->forReading)
@@ -2999,8 +3078,22 @@
 
 PHYSFS_sint64 PHYSFS_fileLength(PHYSFS_File *handle)
 {
+    PHYSFS_sint64 retval;
     PHYSFS_Io *io = ((FileHandle *) handle)->io;
-    return io->length(io);
+    if (io == NULL)
+    {
+        if (magicStream && magicStream->forReading)
+            PHYSFS_readBytes((PHYSFS_File *)magicStream, &retval, sizeof(PHYSFS_sint64));
+    } /* if */
+    else
+    {
+        retval = io->length(io);
+    } /* else */
+
+    if (magicStream && !magicStream->forReading)
+        PHYSFS_writeBytes((PHYSFS_File *)magicStream, &retval, sizeof(PHYSFS_sint64));
+
+    return retval;
 } /* PHYSFS_filelength */
 
 
@@ -3009,6 +3102,9 @@
     FileHandle *fh = (FileHandle *) handle;
     const size_t bufsize = (size_t) _bufsize;
 
+    if (fh->io == NULL) /* magic stream dummy file handle */
+        return 1;
+
     if (!__PHYSFS_ui64FitsAddressSpace(_bufsize))
         BAIL(PHYSFS_ERR_INVALID_ARGUMENT, 0);
 
@@ -3057,6 +3153,9 @@
     PHYSFS_Io *io;
     PHYSFS_sint64 rc;
 
+    if (fh->io == NULL) /* magic stream dummy file handle */
+        return 1;
+
     if ((fh->forReading) || (fh->bufpos == fh->buffill))
         return 1;  /* open for read or buffer empty are successful no-ops. */
 
@@ -3127,10 +3226,39 @@
 
     __PHYSFS_platformReleaseMutex(stateLock);
     __PHYSFS_smallFree(allocated_fname);
+
     return retval;
 } /* PHYSFS_stat */
 
 
+int PHYSFS_createMagicStream(PHYSFS_File *handle)
+{
+    FileHandle *fh = (FileHandle *)handle;
+    BAIL_IF(magicStream != NULL, PHYSFS_ERR_FILES_STILL_OPEN, 0);
+    BAIL_IF(!handle, PHYSFS_ERR_INVALID_ARGUMENT, 0);
+    BAIL_IF(fh->forReading, PHYSFS_ERR_INVALID_ARGUMENT, 0);
+    magicStream = fh;
+    return 1;
+}
+
+int PHYSFS_openMagicStream(PHYSFS_File *handle)
+{
+    FileHandle *fh = (FileHandle *)handle;
+    BAIL_IF(magicStream != NULL, PHYSFS_ERR_FILES_STILL_OPEN, 0);
+    BAIL_IF(!handle, PHYSFS_ERR_INVALID_ARGUMENT, 0);
+    BAIL_IF(!fh->forReading, PHYSFS_ERR_INVALID_ARGUMENT, 0);
+    magicStream = fh;
+    return 1;
+}
+
+int PHYSFS_closeMagicStream()
+{
+	BAIL_IF(magicStream == NULL, PHYSFS_ERR_IO, 0);
+    PHYSFS_close((PHYSFS_File *)magicStream);
+	magicStream = NULL;
+    return 1;
+}
+
 int __PHYSFS_readAll(PHYSFS_Io *io, void *buf, const size_t _len)
 {
     const PHYSFS_uint64 len = (PHYSFS_uint64) _len;
diff -r 44a00c6361b0 -r 9bccb24ba9c9 src/physfs.h
--- a/src/physfs.h	Sun Feb 10 16:00:39 2019 -0500
+++ b/src/physfs.h	Sat Feb 23 20:54:34 2019 +0200
@@ -204,6 +204,24 @@
  *  bothering you, but it's good to be aware of these nuances in case they
  *  don't.
  *
+ * Magic streams can be used to accelerate file operations for deterministic
+ *  processes, such as initial game loads or level loads, at (potential) cost
+ *  of using more disk space. Magic stream files are created by running
+ *  modified application code, writing all disk io operations into a linear
+ *  file. When using a created magic stream file, all file open and close
+ *  operations, seeks etc. are skipped and all data comes from the linear
+ *  data file. The data file is also read through physfs, so it can be
+ *  compressed for additional reduced disk i/o.
+ *
+ * Any files opened before opening the magic stream work normally, so it
+ *  is possible to, for example, stream music from a separate file while
+ *  loading from the magic stream.
+ *
+ * The magic streams do not affect file enumeration or file writes.
+ *
+ * Benefits of magic streams depend on the exact use case; using a physical
+ *  spinning media benefits more than in-memory file library due to seek
+ *  performance difference.
  *
  * Other stuff:
  *
@@ -3884,6 +3902,48 @@
 /* Everything above this line is part of the PhysicsFS 3.1 API. */
 
 
+/**
+* \fn int PHYSFS_createMagicStream(PHYSFS_File *file)
+* \brief Open magic stream file for writing.
+*
+* This is used to start recording the magic stream. After this call,
+*  all read operations through physfs cause data to be written to
+*  the stream. Use PHYSFS_closeMagicStream to end recording.
+*
+* \param handle a physfs file handle that was opened for writing
+* \return nonzero on success, zero on failure. Use
+*         PHYSFS_getLastErrorCode() to obtain the specific error.
+*/
+PHYSFS_DECL int PHYSFS_createMagicStream(PHYSFS_File *handle);
+
+/**
+* \fn int PHYSFS_openMagicStream(PHYSFS_File *file)
+* \brief Open magic stream file for reading.
+*
+* This is used to start replaying the magic stream. After this call,
+*  all read operations through physfs cause data to be read from
+*  the stream. Use PHYSFS_closeMagicStream to end replaying.
+*
+* \param handle a physfs file handle that was opened for reading
+* \return nonzero on success, zero on failure. Use
+*         PHYSFS_getLastErrorCode() to obtain the specific error.
+*/
+PHYSFS_DECL int PHYSFS_openMagicStream(PHYSFS_File *handle);
+
+/**
+* \fn int PHYSFS_closeMagicStream()
+* \brief Close magic stream file.
+*
+* This is used to close the magic stream (either writing or reading).
+*
+* After this the physfs functionality returns to normal.
+*
+* \return nonzero on success, zero on failure. Use
+*         PHYSFS_getLastErrorCode() to obtain the specific error.
+*/
+PHYSFS_DECL int PHYSFS_closeMagicStream();
+
+
 #ifdef __cplusplus
 }
 #endif
diff -r 44a00c6361b0 -r 9bccb24ba9c9 test/test_magicstream.c
--- /dev/null	Thu Jan 01 00:00:00 1970 +0000
+++ b/test/test_magicstream.c	Sat Feb 23 20:54:34 2019 +0200
@@ -0,0 +1,202 @@
+#include <stdio.h>
+#include <stdlib.h>
+#include <string.h>
+
+#include "physfs.h"
+
+#ifdef _WIN32
+#include <Windows.h>
+
+#define TIMETYPE LARGE_INTEGER
+
+long diff_milli(TIMETYPE *start, TIMETYPE *end)
+{
+	TIMETYPE Frequency, elapsed;
+
+	QueryPerformanceFrequency(&Frequency);
+	elapsed.QuadPart = end->QuadPart - start->QuadPart;
+
+	elapsed.QuadPart *= 1000;
+	elapsed.QuadPart /= Frequency.QuadPart;
+
+	return (long)elapsed.QuadPart;
+}
+
+#define GETTIMESTAMP(x) QueryPerformanceCounter(&x)
+#else
+#include <time.h>
+#define TIMETYPE struct timespec
+long diff_milli(TIMETYPE *start, TIMETYPE *end)
+{
+	/* ms */
+	return ((end->tv_sec * 1000) + (end->tv_nsec / 1000000)) -
+		((start->tv_sec * 1000) + (start->tv_nsec / 1000000));
+}
+
+#define GETTIMESTAMP(x) clock_gettime(CLOCK_MONOTONIC, &x)
+#endif
+
+/* Algorithm "xor" from p. 4 of Marsaglia, "Xorshift RNGs" */
+PHYSFS_uint32 randstate = 0xc0cac01a;
+PHYSFS_uint32 xorshift32()
+{	
+	PHYSFS_uint32 x = randstate;
+	x ^= x << 13;
+	x ^= x >> 17;
+	x ^= x << 5;
+	randstate = x;
+	return x;
+}
+
+void make_testdata()
+{
+	int i;
+	PHYSFS_File *f = PHYSFS_openWrite("test.dat");
+	for (i = 0; i < 1024 * 1024; i++)
+	{
+		double a, b;
+		a = xorshift32();
+		b = xorshift32();
+		b *= a;
+		PHYSFS_writeBytes(f, &b, sizeof(double));
+	}
+	PHYSFS_close(f);
+}
+
+#define MAX_BYTES (1024)
+#define MAX_FILES (1024*10)
+
+int total_open = 0;
+int total_bytes = 0;
+int total_ops = 0;
+unsigned int checksum = 0;
+
+char scratch[MAX_BYTES];
+
+void testfunc()
+{
+	int i, bytes;
+	PHYSFS_File *f = PHYSFS_openRead("test.dat");
+	PHYSFS_seek(f, xorshift32() % (1024 * 1024));
+	total_open++;
+	total_ops++;
+
+	int action = 0;
+	int nextaction = 0;
+
+	do
+	{
+		switch (action)
+		{
+		default:
+			bytes = xorshift32() % MAX_BYTES;
+			nextaction = 0;
+			PHYSFS_readBytes(f, scratch, bytes);
+			for (i = 0; i < bytes; i++)
+				nextaction += scratch[i];
+			total_bytes += bytes;
+			total_ops++;
+			//printf("\r%d bytes, %d files   ", total_bytes, total_open);
+			break;
+		case 1:
+			nextaction = (int)PHYSFS_tell(f);
+			total_ops++;
+			break;
+		case 2:
+			nextaction = 0;
+			PHYSFS_seek(f, PHYSFS_tell(f) + (xorshift32() % 100) - 50);
+			total_ops++;
+			total_ops++;
+			break;
+		case 3:
+			nextaction = 0;
+			testfunc();
+			break;
+		case 4:
+			nextaction = 0;
+			PHYSFS_flush(f);
+			total_ops++;
+			break;
+		case 5:
+			nextaction = (int)(PHYSFS_fileLength(f) - PHYSFS_tell(f));
+			total_ops++;
+			total_ops++;
+			break;
+		case 6:
+			nextaction = 0;
+			PHYSFS_eof(f);
+			total_ops++;
+			break;
+		}
+		checksum += nextaction;
+		nextaction %= 7;
+		if (nextaction == action)
+			nextaction = 0;
+		action = nextaction;
+
+	} while (action != 4 && total_open < MAX_FILES);
+
+	PHYSFS_close(f);
+	total_ops++;
+}
+
+void run_test()
+{
+	randstate = 0xc0cac01a;
+	total_open = 0;
+	total_bytes = 0;
+	total_ops = 0;
+	checksum = 0;
+	while (total_open < MAX_FILES)
+		testfunc();
+}
+
+int main(int parc, char ** pars)
+{
+	TIMETYPE time_a, time_b;
+	int i;
+	PHYSFS_init(pars[0]);
+	PHYSFS_setWriteDir(".");
+	PHYSFS_mount(".", "", 0);
+
+	printf("Generating test data file..\t");
+	GETTIMESTAMP(time_a);
+	make_testdata();
+	GETTIMESTAMP(time_b);
+	printf("Generation took %d milliseconds.\n", diff_milli(&time_a, &time_b));
+	printf("Generating magic stream..\t");
+	GETTIMESTAMP(time_a);
+	PHYSFS_File *sf = PHYSFS_openWrite("test.magicstream");
+	PHYSFS_createMagicStream(sf);
+	run_test();
+	PHYSFS_closeMagicStream();
+	GETTIMESTAMP(time_b);
+	printf("Generation took %d milliseconds.\n", diff_milli(&time_a, &time_b));
+	printf("\nTesting..\n\n");
+	int total_with = 0;
+	int total_without = 0;
+	for (i = 0; i < 8; i++)
+	{
+		printf("Running test without magic stream..\t");
+		GETTIMESTAMP(time_a);
+		run_test();
+		GETTIMESTAMP(time_b);
+		total_without += diff_milli(&time_a, &time_b);
+		printf("[%08x] Test took %5d milliseconds. (%d file operations)\n", checksum, diff_milli(&time_a, &time_b), total_ops);
+
+		printf("Running test with magic stream..\t");
+		GETTIMESTAMP(time_a);
+		sf = PHYSFS_openRead("test.magicstream");
+		PHYSFS_openMagicStream(sf);
+		run_test();
+		PHYSFS_closeMagicStream();
+		GETTIMESTAMP(time_b);
+		total_with += diff_milli(&time_a, &time_b);
+		printf("[%08x] Test took %5d milliseconds. (%d file operations)\n", checksum, diff_milli(&time_a, &time_b), total_ops);
+	}
+	printf("total without: \t%d\n", total_without);
+	printf("total with: \t%d\n", total_with);
+
+	PHYSFS_deinit();
+	return 0;
+}
\ No newline at end of file
